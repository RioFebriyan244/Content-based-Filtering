# -*- coding: utf-8 -*-
"""Content-based Filtering.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E5s3QUT3TcaswRlGGQwmOfYYBTxj-rgY
"""

# [Text Cell]
# Import library yang dibutuhkan untuk pemrosesan data dan perhitungan similarity
import pandas as pd
from sklearn.preprocessing import LabelEncoder, MinMaxScaler
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np

df = pd.read_csv('products.csv')

# [Text Cell]
# Encode kolom kategorikal (Size dan Gender) menjadi angka agar dapat digunakan dalam perhitungan similarity

size_encoder = LabelEncoder()
gender_encoder = LabelEncoder()
df['Size_encoded'] = size_encoder.fit_transform(df['Size'])
df['Gender_encoded'] = gender_encoder.fit_transform(df['Gender'])

# [Text Cell]
# Pilih fitur-fitur yang akan digunakan dalam content-based filtering
# Lakukan normalisasi agar semua fitur memiliki skala yang sama

features = ['Price', 'Rating', 'Colors', 'Size_encoded', 'Gender_encoded']
scaler = MinMaxScaler()
scaled_features = scaler.fit_transform(df[features])

# [Text Cell]
# Hitung similarity antar produk menggunakan cosine similarity

similarity_matrix = cosine_similarity(scaled_features)

# [Text Cell]
# Definisikan fungsi untuk merekomendasikan produk berdasarkan produk yang disukai
# Menggunakan hasil similarity matrix

def recommend_products(title, top_n=3):
    idx = df[df['Title'] == title].index[0]
    sim_scores = list(enumerate(similarity_matrix[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    recommended_indices = [i for i, score in sim_scores[1:top_n+1]]
    return df.iloc[recommended_indices][['Title', 'Price', 'Rating']]

# [Text Cell]
# Jalankan fungsi rekomendasi untuk produk "Hoodie 3"

recommendation = recommend_products("Hoodie 3", top_n=2)
recommendation